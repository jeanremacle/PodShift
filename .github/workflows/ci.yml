name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .[dev]

      - name: Run Black (code formatting)
        run: black --check --diff scripts/

      - name: Run isort (import sorting)
        run: isort --check-only --diff scripts/

      - name: Run flake8 (linting)
        run: flake8 scripts/

      - name: Run mypy (type checking)
        run: mypy scripts/
        continue-on-error: true

      - name: Run bandit (security linting)
        run: bandit -r scripts/
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster builds
          - os: ubuntu-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install jq

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Create test directory structure
        run: |
          mkdir -p tests
          touch tests/__init__.py

      - name: Run tests (if tests exist)
        run: |
          if [ -d tests ] && [ "$(find tests -name '*.py' -not -name '__init__.py' | wc -l)" -gt 0 ]; then
            pytest tests/ -v --cov=scripts --cov-report=xml
          else
            echo "No tests found, creating basic import test"
            python -c "
            import sys
            sys.path.append('scripts/discovery')
            try:
                import docker_inventory
                import dependency_mapper
                print('✓ All Python modules can be imported successfully')
            except ImportError as e:
                print(f'✗ Import error: {e}')
                sys.exit(1)
            "
          fi

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  shell-scripts:
    name: Shell Script Testing
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install shellcheck
          else
            sudo apt-get update
            sudo apt-get install -y shellcheck
          fi

      - name: Run shellcheck on bash scripts
        run: |
          find . -name "*.sh" -type f -exec shellcheck {} +

      - name: Test setup script syntax
        run: |
          bash -n setup.sh

      - name: Test discovery scripts syntax
        run: |
          find scripts/ -name "*.sh" -type f -exec bash -n {} \;

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run bandit security scan
        run: bandit -r scripts/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run safety check for dependencies
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [lint, test, shell-scripts]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distribution
        run: python -m build

      - name: Check distribution
        run: twine check dist/*

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v3
        with:
          name: distribution
          path: dist/

  integration:
    name: Integration Testing
    runs-on: macos-latest
    needs: [lint, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          brew install jq

      - name: Run setup script
        run: |
          chmod +x setup.sh
          ./setup.sh --skip-homebrew-install
        env:
          CI: true

      - name: Test system resource detection
        run: |
          source ./activate.sh
          bash scripts/discovery/system_resources.sh --json-only
          
      - name: Verify generated files
        run: |
          ls -la system_resources_*.json || echo "No system resource files generated"

      - name: Test Python scripts
        run: |
          source ./activate.sh
          python scripts/discovery/docker_inventory.py --help
          python scripts/discovery/dependency_mapper.py --help

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download distribution artifacts
        uses: actions/download-artifact@v3
        with:
          name: distribution
          path: dist/

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## PodShift v${{ steps.get_version.outputs.version }}
            
            ### What's Changed
            - Automated release from main branch
            - See commit history for detailed changes
            
            ### Installation
            ```bash
            # Download and extract the toolkit
            wget https://github.com/${{ github.repository }}/archive/v${{ steps.get_version.outputs.version }}.tar.gz
            tar -xzf v${{ steps.get_version.outputs.version }}.tar.gz
            cd podshift-${{ steps.get_version.outputs.version }}
            
            # Run setup
            ./setup.sh
            ```
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: podshift-dist.zip
          asset_content_type: application/zip